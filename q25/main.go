package main

import (
	"math/big"
)

// The Fibonacci sequence is defined by the recurrence relation:

// Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
// Hence the first 12 terms will be:

// F1 = 1
// F2 = 1
// F3 = 2
// F4 = 3
// F5 = 5
// F6 = 8
// F7 = 13
// F8 = 21
// F9 = 34
// F10 = 55
// F11 = 89
// F12 = 144
// The 12th term, F12, is the first term to contain three digits.

// What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

func main() {
	print("Hello \n")
	a := big.NewInt(0)
	b := big.NewInt(1)
	count := 0

	var limit big.Int
	limit.Exp(big.NewInt(10), big.NewInt(999), nil)
	for a.Cmp(&limit) < 0 {
		count = count + 1
		a.Add(a, b)
		a, b = b, a
	}
	print(count) //4782
	print("\n")
	print(a.Text(10)) // 107006626638275893676498058445739688508368389663215166501323520337531452060469404062188914758248979265780469488817759195748433646667256
	//9959512996030461262748092482186144069433051234774442750273781753087579391666192149259186759553966422837148943113074699503439547001985432609723067290192870
	//5264472437261177158218255484911205250132014786129659313817922355596574520395061375514678375432291196021299340482607061753977068470682028954869026661854351
	//2452190036948064135744747091170761976694569107009802439343961747410373691250323136553216477369702316775505159517351846057995491941096777837322966579658164
	//6513903488154256310184224190259846088000110186255550245493937113651657039447629584714548523425950428582425306083544435428212611008992863795048006894330309
	//7732178348645431132057656598684562886168087186938352973506439862976406600007235629179052070511640776148124918858309459405666883391093509444565763576661516
	//19317753792891661581327159616877487983821820492520348473874384736771934512787029218636250627816
}
